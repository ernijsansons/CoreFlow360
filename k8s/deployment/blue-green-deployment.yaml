# CoreFlow360 Blue-Green Deployment Configuration
# Zero-downtime deployment strategy for production consciousness

apiVersion: v1
kind: Namespace
metadata:
  name: coreflow360-blue-green
  labels:
    environment: production
    deployment-strategy: blue-green
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coreflow360-blue
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    version: blue
    deployment-strategy: blue-green
spec:
  replicas: 3
  selector:
    matchLabels:
      app: coreflow360
      version: blue
  template:
    metadata:
      labels:
        app: coreflow360
        version: blue
        deployment-strategy: blue-green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      serviceAccountName: coreflow360-blue-green
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: coreflow360
        image: coreflow360/app:blue-latest
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: DEPLOYMENT_SLOT
          value: "blue"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/startup
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-cache
          mountPath: /app/.next/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-cache
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coreflow360-green
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    version: green
    deployment-strategy: blue-green
spec:
  replicas: 0  # Initially scaled to 0, scaled up during deployment
  selector:
    matchLabels:
      app: coreflow360
      version: green
  template:
    metadata:
      labels:
        app: coreflow360
        version: green
        deployment-strategy: blue-green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      serviceAccountName: coreflow360-blue-green
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: coreflow360
        image: coreflow360/app:green-latest
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: DEPLOYMENT_SLOT
          value: "green"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/startup
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-cache
          mountPath: /app/.next/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-cache
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
---
# Active Service (routes traffic to current active deployment)
apiVersion: v1
kind: Service
metadata:
  name: coreflow360-active
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    service-type: active
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/api/health"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app: coreflow360
    version: blue  # Initially routes to blue
---
# Preview Service (for testing green deployment before switch)
apiVersion: v1
kind: Service
metadata:
  name: coreflow360-preview
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    service-type: preview
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app: coreflow360
    version: green  # Always routes to green for testing
---
# Blue Service (direct access to blue deployment)
apiVersion: v1
kind: Service
metadata:
  name: coreflow360-blue
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    service-type: blue
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app: coreflow360
    version: blue
---
# Green Service (direct access to green deployment)
apiVersion: v1
kind: Service
metadata:
  name: coreflow360-green
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    service-type: green
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app: coreflow360
    version: green
---
# Service Account for Blue-Green Deployments
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coreflow360-blue-green
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    deployment-strategy: blue-green
---
# RBAC for Blue-Green Deployment Management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: coreflow360-blue-green-manager
  namespace: coreflow360-blue-green
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "patch", "update", "scale"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: coreflow360-blue-green-manager-binding
  namespace: coreflow360-blue-green
subjects:
- kind: ServiceAccount
  name: coreflow360-blue-green
  namespace: coreflow360-blue-green
roleRef:
  kind: Role
  name: coreflow360-blue-green-manager
  apiGroup: rbac.authorization.k8s.io
---
# Horizontal Pod Autoscaler for Blue Deployment
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: coreflow360-blue-hpa
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    version: blue
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: coreflow360-blue
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
---
# Horizontal Pod Autoscaler for Green Deployment
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: coreflow360-green-hpa
  namespace: coreflow360-blue-green
  labels:
    app: coreflow360
    version: green
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: coreflow360-green
  minReplicas: 0  # Initially scaled to 0
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
---
# Pod Disruption Budget for Blue Deployment
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: coreflow360-blue-pdb
  namespace: coreflow360-blue-green
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: coreflow360
      version: blue
---
# Pod Disruption Budget for Green Deployment
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: coreflow360-green-pdb
  namespace: coreflow360-blue-green
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: coreflow360
      version: green