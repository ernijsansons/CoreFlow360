# CoreFlow360 Secure Secrets Management
apiVersion: v1
kind: Namespace
metadata:
  name: coreflow360-security
  labels:
    app: coreflow360
    component: security
    security-scan: enabled
---
apiVersion: v1
kind: Secret
metadata:
  name: coreflow360-app-secrets
  namespace: coreflow360
  labels:
    app: coreflow360
    component: secrets
  annotations:
    reloader.stakater.com/match: "true"
type: Opaque
stringData:
  # Application secrets - REPLACE WITH ACTUAL VALUES
  database-url: "postgresql://consciousness_user:REPLACE_WITH_SECURE_PASSWORD@postgres:5432/consciousness?sslmode=require"
  redis-url: "redis://:REPLACE_WITH_REDIS_PASSWORD@redis:6379"
  openai-api-key: "sk-REPLACE_WITH_YOUR_OPENAI_API_KEY"
  nextauth-secret: "REPLACE_WITH_32_CHAR_NEXTAUTH_SECRET"
  stripe-secret-key: "sk_live_REPLACE_WITH_STRIPE_SECRET"
  stripe-webhook-secret: "whsec_REPLACE_WITH_STRIPE_WEBHOOK_SECRET"
  jwt-secret: "REPLACE_WITH_64_CHAR_JWT_SECRET"
  encryption-key: "REPLACE_WITH_32_CHAR_ENCRYPTION_KEY"

---
apiVersion: v1
kind: Secret
metadata:
  name: coreflow360-monitoring-secrets
  namespace: coreflow360
  labels:
    app: coreflow360
    component: monitoring
type: Opaque
stringData:
  # Monitoring stack secrets
  grafana-admin-password: "REPLACE_WITH_SECURE_GRAFANA_PASSWORD"
  postgres-exporter-dsn: "postgresql://monitor_user:REPLACE_WITH_MONITOR_PASSWORD@postgres:5432/consciousness?sslmode=require"
  redis-password: "REPLACE_WITH_REDIS_PASSWORD"
  prometheus-basic-auth: "admin:$2b$12$REPLACE_WITH_BCRYPT_HASH"
  alertmanager-webhook-url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"

---
apiVersion: v1
kind: Secret
metadata:
  name: coreflow360-security-secrets
  namespace: coreflow360
  labels:
    app: coreflow360
    component: security
type: Opaque
stringData:
  # Security and audit secrets
  audit-webhook-url: "https://your-siem.example.com/webhook"
  security-scan-token: "REPLACE_WITH_SNYK_TOKEN"
  vulnerability-db-key: "REPLACE_WITH_TRIVY_DB_KEY"
  incident-response-key: "REPLACE_WITH_PAGERDUTY_KEY"
  security-team-webhook: "https://hooks.slack.com/services/SECURITY/TEAM/WEBHOOK"

---
apiVersion: v1
kind: Secret
metadata:
  name: coreflow360-ssl-certs
  namespace: coreflow360
  labels:
    app: coreflow360
    component: ssl
type: kubernetes.io/tls
data:
  # SSL certificates - base64 encoded
  tls.crt: LS0tLS1CRUdJTi0tLS0t  # REPLACE_WITH_BASE64_CERT
  tls.key: LS0tLS1CRUdJTi0tLS0t  # REPLACE_WITH_BASE64_KEY

---
apiVersion: v1
kind: Secret
metadata:
  name: coreflow360-registry-secret
  namespace: coreflow360
  labels:
    app: coreflow360
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5jb3JlZmxvdzM2MC5jb20iOnsidXNlcm5hbWUiOiJSRVBMQUNFX1dJVEhfVVNFUk5BTUUiLCJwYXNzd29yZCI6IlJFUExBQ0VfV0lUSF9QQVNTV09SRCIsImF1dGgiOiJSRVBMQUNFX1dJVEhfQkFTRTY0X0FVVEgifX19

---
# ServiceAccount for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: coreflow360
  labels:
    app: coreflow360
    component: external-secrets
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/coreflow360-external-secrets-role

---
# RBAC for secrets management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: coreflow360
  name: secret-manager
  labels:
    app: coreflow360
    component: security
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding
  namespace: coreflow360
  labels:
    app: coreflow360
    component: security
subjects:
- kind: ServiceAccount
  name: external-secrets-sa
  namespace: coreflow360
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io

---
# Secret rotation job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-job
  namespace: coreflow360
  labels:
    app: coreflow360
    component: security
spec:
  schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: coreflow360
            component: secret-rotation
        spec:
          serviceAccountName: external-secrets-sa
          containers:
          - name: secret-rotator
            image: coreflow360/secret-rotator:latest
            imagePullPolicy: Always
            env:
            - name: KUBERNETES_NAMESPACE
              value: "coreflow360"
            - name: ROTATION_ENABLED
              value: "true"
            - name: DRY_RUN
              value: "false"
            envFrom:
            - secretRef:
                name: coreflow360-security-secrets
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1000
              capabilities:
                drop:
                - ALL
          restartPolicy: OnFailure
          securityContext:
            fsGroup: 1000