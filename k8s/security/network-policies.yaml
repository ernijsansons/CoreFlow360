# CoreFlow360 Network Security Policies
# Comprehensive network segmentation and traffic control

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-default-deny-all
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Allow ingress from ingress controller
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-allow-ingress
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector:
    matchLabels:
      app: coreflow360
      component: consciousness
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080

---
# Allow consciousness pods to communicate with each other
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-consciousness-internal
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector:
    matchLabels:
      app: coreflow360
      component: consciousness
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: coreflow360
          component: consciousness
    - podSelector:
        matchLabels:
          app: coreflow360
          component: consciousness-mesh
    - podSelector:
        matchLabels:
          app: coreflow360
          component: consciousness-monitor
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: coreflow360
          component: consciousness
    - podSelector:
        matchLabels:
          app: coreflow360
          component: consciousness-mesh
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090

---
# Allow consciousness to access database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-database-access
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector:
    matchLabels:
      app: coreflow360
      component: consciousness
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379

---
# Allow consciousness to access external APIs
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-external-api-access
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector:
    matchLabels:
      app: coreflow360
      component: consciousness
  policyTypes:
  - Egress
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # HTTPS for external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # HTTP for health checks and webhooks
  - to: []
    ports:
    - protocol: TCP
      port: 80

---
# Monitoring network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-monitoring-access
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector:
    matchLabels:
      app: coreflow360
      component: consciousness-monitor
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: prometheus
    - namespaceSelector:
        matchLabels:
          name: grafana
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  # Access to consciousness pods for monitoring
  - to:
    - podSelector:
        matchLabels:
          app: coreflow360
          component: consciousness
    - podSelector:
        matchLabels:
          app: coreflow360
          component: consciousness-mesh
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  # External monitoring services
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: UDP
      port: 53

---
# Restrict access to sensitive admin endpoints
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-admin-restriction
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector:
    matchLabels:
      app: coreflow360
      component: consciousness
      access-level: admin
  policyTypes:
  - Ingress
  ingress:
  # Only allow from specific admin namespaces/pods
  - from:
    - namespaceSelector:
        matchLabels:
          name: admin-tools
    - podSelector:
        matchLabels:
          role: admin
    ports:
    - protocol: TCP
      port: 3000

---
# Block access to metadata services (cloud security)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-block-metadata
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  # Block access to cloud metadata services
  - to: []
    except:
    - ipBlock:
        cidr: 169.254.169.254/32  # AWS metadata service
    - ipBlock:
        cidr: 169.254.169.251/32  # AWS metadata service v2
    - ipBlock:
        cidr: 169.254.169.254/32  # GCP metadata service
    - ipBlock:
        cidr: 168.63.129.16/32    # Azure metadata service

---
# Service mesh communication (Istio)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-service-mesh
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
spec:
  podSelector:
    matchLabels:
      app: coreflow360
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow Istio sidecar communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15090  # Envoy admin
    - protocol: TCP
      port: 15001  # Envoy outbound
    - protocol: TCP
      port: 15006  # Envoy inbound
  egress:
  # Allow Istio control plane communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15010  # Pilot
    - protocol: TCP
      port: 15011  # Pilot
    - protocol: TCP
      port: 8080   # Citadel
    - protocol: TCP
      port: 9090   # Prometheus
    - protocol: TCP
      port: 15090  # Envoy admin

---
# Emergency break-glass policy (disabled by default)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-emergency-access
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-security
    emergency: "true"
  annotations:
    policy.coreflow360.com/enabled: "false"
    policy.coreflow360.com/emergency-contact: "security@coreflow360.com"
    policy.coreflow360.com/reason: "Emergency debugging access"
spec:
  podSelector:
    matchLabels:
      app: coreflow360
      emergency-access: "enabled"
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - {}  # Allow all ingress when emergency access is enabled
  egress:
  - {}  # Allow all egress when emergency access is enabled