---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coreflow360-app
  namespace: coreflow360
  labels:
    app: coreflow360
    component: app
    tier: frontend
    version: v1.0.0
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "Initial production deployment"
spec:
  replicas: 5
  selector:
    matchLabels:
      app: coreflow360
      component: app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: coreflow360
        component: app
        tier: frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/api/metrics"
        prometheus.io/port: "3000"
    spec:
      serviceAccountName: coreflow360-app
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: app
        image: ghcr.io/coreflow360/coreflow360:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: redis-url
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: nextauth-secret
        - name: NEXTAUTH_URL
          value: "https://coreflow360.com"
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: coreflow360-secrets
              key: encryption-key
        - name: AWS_REGION
          value: "us-east-1"
        - name: S3_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: coreflow360-config
              key: s3-bucket-name
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health/startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: app-storage
          mountPath: /app/uploads
          readOnly: false
        - name: logs
          mountPath: /app/logs
          readOnly: false
        - name: tmp
          mountPath: /tmp
          readOnly: false
      volumes:
      - name: app-storage
        persistentVolumeClaim:
          claimName: coreflow360-storage
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      imagePullSecrets:
      - name: ghcr-secret
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - coreflow360
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "coreflow360"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: coreflow360-app-service
  namespace: coreflow360
  labels:
    app: coreflow360
    component: app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  selector:
    app: coreflow360
    component: app
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coreflow360-app
  namespace: coreflow360
  labels:
    app: coreflow360
    component: app
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/coreflow360-production-app-role
automountServiceAccountToken: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coreflow360-config
  namespace: coreflow360
  labels:
    app: coreflow360
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  s3-bucket-name: "coreflow360-production-app-storage"
  redis-cluster-enabled: "true"
  database-pool-size: "10"
  rate-limit-enabled: "true"
  monitoring-enabled: "true"
  tracing-enabled: "true"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: coreflow360-storage
  namespace: coreflow360
  labels:
    app: coreflow360
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: efs-sc

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: coreflow360-app-hpa
  namespace: coreflow360
  labels:
    app: coreflow360
    component: app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: coreflow360-app
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: coreflow360-app-pdb
  namespace: coreflow360
  labels:
    app: coreflow360
    component: app
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: coreflow360
      component: app

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: coreflow360-app-ingress
  namespace: coreflow360
  labels:
    app: coreflow360
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:ACCOUNT_ID:certificate/CERTIFICATE_ID
    alb.ingress.kubernetes.io/healthcheck-path: /api/health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=60
spec:
  rules:
  - host: coreflow360.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: coreflow360-app-service
            port:
              number: 80
  - host: www.coreflow360.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: coreflow360-app-service
            port:
              number: 80
  - host: api.coreflow360.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: coreflow360-app-service
            port:
              number: 80

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coreflow360-app-network-policy
  namespace: coreflow360
  labels:
    app: coreflow360
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: coreflow360
      component: app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 80    # HTTP
    - protocol: UDP
      port: 53    # DNS