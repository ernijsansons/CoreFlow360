// CoreFlow360 - Production Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  READONLY
}

enum IndustryType {
  GENERAL
  HVAC
  LEGAL
  MANUFACTURING
  HEALTHCARE
  FINANCE
  REAL_ESTATE
  CONSTRUCTION
  CONSULTING
  RETAIL
  EDUCATION
}

enum AIModelType {
  GPT4
  CLAUDE3
  CUSTOM
  VISION
  EMBEDDING
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  AI_ANALYSIS
  SECURITY_EVENT
}

// Problem Intelligence Enums
enum ProblemSeverity {
  MINOR
  MODERATE
  MAJOR
  CRITICAL
  EXISTENTIAL
}

enum ProblemSource {
  EMAIL
  CALL
  MEETING
  SURVEY
  SUPPORT_TICKET
  SOCIAL_MEDIA
  NEWS_ARTICLE
  FINANCIAL_REPORT
  JOB_POSTING
  REGULATORY_FILING
  COMPETITOR_INTELLIGENCE
  INDUSTRY_REPORT
  ANALYST_REPORT
  WEBSITE_BEHAVIOR
  TECHNOLOGY_CHANGE
  EXECUTIVE_COMMUNICATION
}

enum ProblemStatus {
  DETECTED
  ANALYZING
  CONFIRMED
  ADDRESSED
  RESOLVED
  ESCALATED
  MONITORING
}

enum StakeholderRole {
  CHAMPION
  DECISION_MAKER
  INFLUENCER
  BLOCKER
  BUDGET_OWNER
  END_USER
  TECHNICAL_EVALUATOR
}

enum CompanyMonitoringStatus {
  ACTIVE
  PAUSED
  ARCHIVED
  PRIORITY
}

// Core Models
model Tenant {
  id           String       @id @default(cuid())
  name         String
  slug         String       @unique
  industryType IndustryType @default(GENERAL)
  customDomain String?
  settings     String       @default("{}")
  metadata     String       @default("{}")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users               User[]
  departments         Department[]
  customers           Customer[]
  deals               Deal[]
  projects            Project[]
  invoices            Invoice[]
  auditLogs           AuditLog[]
  subscription        Subscription?
  tenantSubscriptions TenantSubscription[]

  // HVAC Relations
  equipment        Equipment[]
  workOrders       WorkOrder[]
  serviceContracts ServiceContract[]

  // SaaS Relations
  saasSubscriptions SaaSSubscription[]

  // CRM Enhancement Relations
  proposals           Proposal[]
  outreachContent     OutreachContent[]
  outreachCampaigns   OutreachCampaign[]
  customizedTemplates CustomizedTemplate[]
  personalizedVideos  PersonalizedVideo[]
  engagementCampaigns EngagementCampaign[]

  // Problem Intelligence Relations
  companyIntelligence CompanyIntelligence[]
  customerProblems    CustomerProblem[]

  // Freemium and Conversion Relations
  freemiumUsers       FreemiumUser[]
  conversionEvents    ConversionEvent[]
  userSessionActivity UserSessionActivity[]
  performanceMetrics  PerformanceMetric[]

  @@map("tenants")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  role        UserRole  @default(USER)
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Department relation
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedDeals    Deal[]     @relation("DealAssignee")
  assignedProjects Project[]  @relation("ProjectAssignee")
  createdProjects  Project[]  @relation("ProjectCreator")
  auditLogs        AuditLog[]

  // CRM Enhancement Relations
  proposals           Proposal[]
  outreachContent     OutreachContent[]
  outreachCampaigns   OutreachCampaign[]
  customizedTemplates CustomizedTemplate[]
  personalizedVideos  PersonalizedVideo[]
  engagementCampaigns EngagementCampaign[]

  // Problem Intelligence Relations
  assignedProblems CustomerProblem[]
  problemAlerts    ProblemAlert[]

  // Freemium and Conversion Relations
  freemiumUser        FreemiumUser?
  onboarding          UserOnboarding?
  conversionEvents    ConversionEvent[]
  sessionActivity     UserSessionActivity[]

  @@index([email, tenantId])
  @@map("users")
}

model Department {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]

  @@unique([tenantId, name])
  @@map("departments")
}

model Customer {
  id       String  @id @default(cuid())
  name     String
  email    String?
  phone    String?
  address  String?
  company  String?
  industry String?

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deals            Deal[]
  projects         Project[]
  invoices         Invoice[]
  workOrders       WorkOrder[]
  serviceContracts ServiceContract[]
  problems         CustomerProblem[]

  @@index([tenantId, email])
  @@map("customers")
}

model Deal {
  id          String  @id @default(cuid())
  title       String
  description String?
  value       Float?
  status      String  @default("OPEN")

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Customer relation
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Assignee relation
  assigneeId String?
  assignee   User?   @relation("DealAssignee", fields: [assigneeId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, status])
  @@index([assigneeId])
  @@map("deals")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("PLANNING")
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Customer relation
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  // Assignee relation
  assigneeId String?
  assignee   User?   @relation("ProjectAssignee", fields: [assigneeId], references: [id])

  // Creator relation
  creatorId String
  creator   User   @relation("ProjectCreator", fields: [creatorId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, status])
  @@map("projects")
}

model Invoice {
  id       String    @id @default(cuid())
  number   String
  amount   Float
  status   String    @default("DRAFT")
  dueDate  DateTime?
  paidDate DateTime?

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Customer relation
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, number])
  @@map("invoices")
}

// HVAC Models
model Equipment {
  id           String  @id @default(cuid())
  name         String
  type         String
  model        String?
  serialNumber String?
  location     String?
  status       String  @default("ACTIVE")

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workOrders      WorkOrder[]
  maintenanceLogs MaintenanceLog[]

  @@map("equipment")
}

model WorkOrder {
  id              String    @id @default(cuid())
  workOrderNumber String
  title           String
  description     String?
  priority        String    @default("MEDIUM")
  status          String    @default("PENDING")
  scheduledDate   DateTime?
  assignedTo      String?
  estimatedHours  Float?
  actualHours     Float?

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Customer relation
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Equipment relation
  equipmentId String?
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, workOrderNumber])
  @@index([tenantId, status, scheduledDate])
  @@map("work_orders")
}

model ServiceContract {
  id             String   @id @default(cuid())
  contractNumber String
  contractType   String
  name           String
  status         String   @default("DRAFT")
  startDate      DateTime
  endDate        DateTime
  contractValue  Float

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Customer relation
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, contractNumber])
  @@index([tenantId, endDate])
  @@map("service_contracts")
}

model MaintenanceLog {
  id              String   @id @default(cuid())
  description     String
  maintenanceDate DateTime
  title           String
  type            String   @default("PREVENTIVE")
  performedBy     String?
  cost            Float?

  // Equipment relation
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([equipmentId, maintenanceDate])
  @@map("maintenance_logs")
}

// Bundle and Subscription Models
model Bundle {
  id             String @id @default(cuid())
  name           String
  description    String
  tier           String // starter, professional, enterprise, ultimate
  category       String // finance, hr, legal, manufacturing, erp, ai_enhancement
  basePrice      Float
  perUserPrice   Float
  features       String // Serialized feature list
  limits         String // Usage limits
  aiCapabilities String // AI capabilities included

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptions       Subscription[]
  tenantSubscriptions TenantSubscription[]

  @@unique([name])
  @@map("bundles")
}

model TenantSubscription {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Bundle Configuration
  bundleId String
  bundle   Bundle @relation(fields: [bundleId], references: [id])
  users    Int    @default(1)
  price    Float // Calculated via formula

  // Subscription Status
  status      SubscriptionStatus @default(TRIAL)
  startDate   DateTime           @default(now())
  endDate     DateTime           @default(now())
  trialEndsAt DateTime?

  // Features & Limits
  enabledFeatures     String  @default("[]") // JSON array of feature strings
  customLimits        String? // Override bundle limits
  additionalResources String? // Extra resources

  // Billing
  billingCycle         BillingCycle @default(MONTHLY)
  stripeSubscriptionId String?      @unique
  stripeCustomerId     String?
  lastBilledAt         DateTime?
  nextBillingDate      DateTime?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cancelledAt DateTime?

  // Relations
  usageMetrics UsageMetric[]
  invoices     SubscriptionInvoice[]

  @@unique([tenantId, bundleId])
  @@index([status, endDate])
  @@index([tenantId, status])
  @@map("tenant_subscriptions")
}

enum SubscriptionStatus {
  PENDING
  TRIAL
  FREE
  ACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
}

enum BillingCycle {
  MONTHLY
  ANNUAL
  QUARTERLY
}

model Subscription {
  id                 String    @id @default(cuid())
  status             String    @default("trial") // trial, active, suspended, cancelled
  billingCycle       String    @default("monthly") // monthly, annual
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  trialEndsAt        DateTime?

  // Stripe Integration
  stripeSubscriptionId String? @unique
  stripeCustomerId     String?

  // Bundle relation
  bundleId String
  bundle   Bundle @relation(fields: [bundleId], references: [id])

  // Tenant relation
  tenantId String @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Usage tracking
  usage               String  @default("{}")
  customLimits        String? // Override bundle limits
  additionalResources String? // Extra resources purchased

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cancelledAt DateTime?

  // Relations
  usageMetrics UsageMetric[]
  invoices     SubscriptionInvoice[]

  @@index([status, currentPeriodEnd])
  @@map("subscriptions")
}

model UsageMetric {
  id         String   @id @default(cuid())
  metricType String // users, storage, api_calls, ai_operations
  value      Float
  recordedAt DateTime

  // Subscription relation
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt            DateTime            @default(now())
  TenantSubscription   TenantSubscription? @relation(fields: [tenantSubscriptionId], references: [id])
  tenantSubscriptionId String?

  @@index([subscriptionId, metricType, recordedAt])
  @@map("usage_metrics")
}

model SubscriptionInvoice {
  id            String    @id @default(cuid())
  invoiceNumber String
  amount        Float
  currency      String    @default("USD")
  status        String    @default("draft") // draft, pending, paid, failed
  dueDate       DateTime
  paidAt        DateTime?

  // Stripe Integration
  stripeInvoiceId       String? @unique
  stripePaymentIntentId String?

  // Subscription relation
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  TenantSubscription   TenantSubscription? @relation(fields: [tenantSubscriptionId], references: [id])
  tenantSubscriptionId String?

  @@unique([subscriptionId, invoiceNumber])
  @@map("subscription_invoices")
}

// SaaS Models (Legacy - kept for compatibility)
model SaaSSubscription {
  id              String @id @default(cuid())
  subscriptionKey String
  planName        String
  status          String @default("ACTIVE")
  healthScore     Float
  churnRisk       Float

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  usageMetrics SaaSUsageMetric[]

  @@index([tenantId, healthScore, churnRisk])
  @@map("saas_subscriptions")
}

model SaaSUsageMetric {
  id          String   @id @default(cuid())
  metricName  String
  metricValue Float
  recordedAt  DateTime

  // Subscription relation
  subscriptionId String
  subscription   SaaSSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@index([subscriptionId, recordedAt])
  @@map("saas_usage_metrics")
}

// Audit Model
model AuditLog {
  id           String      @id @default(cuid())
  action       AuditAction
  resourceType String
  resourceId   String?
  details      String?

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // User relation
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())

  @@index([tenantId, createdAt])
  @@index([userId])
  @@map("audit_logs")
}

// CRM Enhancement Models
model Proposal {
  id                String   @id @default(cuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  templateId        String
  clientName        String
  decisionMakerName String
  content           String
  metadata          String?
  status            String   @default("DRAFT")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([tenantId, status])
  @@map("proposals")
}

model OutreachContent {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  method        String
  targetName    String
  targetCompany String
  content       String
  metadata      String?
  status        String   @default("READY")
  createdAt     DateTime @default(now())

  @@index([tenantId, method])
  @@map("outreach_content")
}

model OutreachCampaign {
  id              String    @id @default(cuid())
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  name            String
  targetName      String
  targetCompany   String
  sequenceData    String
  selectedMethods String      @default("[]") // JSON array of method strings
  status          String    @default("ACTIVE")
  currentStep     Int       @default(0)
  metadata        String?
  lastActivityAt  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([tenantId, status])
  @@map("outreach_campaigns")
}

model ScheduledOutreach {
  id           String    @id @default(cuid())
  campaignId   String
  method       String
  scheduledFor DateTime
  targetData   String
  status       String    @default("PENDING")
  executedAt   DateTime?
  result       String?
  createdAt    DateTime  @default(now())

  @@index([campaignId, scheduledFor])
  @@map("scheduled_outreach")
}

model CampaignAnalytics {
  id             String   @id @default(cuid())
  campaignId     String   @unique
  tenantId       String
  totalSteps     Int
  completedSteps Int      @default(0)
  engagementRate Float    @default(0)
  responseRate   Float    @default(0)
  conversionRate Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([tenantId])
  @@map("campaign_analytics")
}

model CustomizedTemplate {
  id              String   @id @default(cuid())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  baseTemplateId  String
  customizations  String
  aiEnhancements  String     @default("[]") // JSON array of enhancement strings
  enhancedContent String?
  status          String   @default("PROCESSING")
  editorUrl       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenantId, baseTemplateId])
  @@map("customized_templates")
}

model TemplateDownload {
  id           String   @id @default(cuid())
  templateId   String
  userId       String
  tenantId     String
  downloadedAt DateTime @default(now())

  @@index([templateId])
  @@index([userId])
  @@map("template_downloads")
}

// Video Generation Models
model PersonalizedVideo {
  id                 String   @id @default(cuid())
  tenantId           String
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  templateId         String
  avatarId           String
  recipientName      String
  recipientCompany   String
  script             String
  settings           String
  variables          String
  videoUrl           String
  thumbnailUrl       String
  duration           Int? // in seconds
  status             String   @default("READY")
  generationMetadata String?
  viewCount          Int      @default(0)
  shareCount         Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([tenantId, status])
  @@map("personalized_videos")
}

// Engagement System Models
model EngagementCampaign {
  id               String    @id @default(cuid())
  tenantId         String
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  sequenceId       String
  name             String
  targetContactIds String      @default("[]") // JSON array of contact IDs
  selectedChannels String      @default("[]") // JSON array of channel strings
  status           String    @default("ACTIVE")
  startedAt        DateTime  @default(now())
  pausedAt         DateTime?
  completedAt      DateTime?
  metadata         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([tenantId, status])
  @@map("engagement_campaigns")
}

model ContactEngagement {
  id              String   @id @default(cuid())
  campaignId      String
  contactId       String
  currentStep     Int      @default(0)
  status          String   @default("ACTIVE")
  engagementScore Float    @default(0)
  lastTouchAt     DateTime
  totalTouches    Int      @default(0)
  responses       Int      @default(0)
  conversions     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([campaignId, contactId])
  @@map("contact_engagement")
}

model ScheduledTouchpoint {
  id           String    @id @default(cuid())
  campaignId   String
  contactId    String
  channel      String
  stepNumber   Int
  scheduledFor DateTime
  content      String
  status       String    @default("PENDING")
  executedAt   DateTime?
  result       String?
  createdAt    DateTime  @default(now())

  @@index([campaignId, scheduledFor])
  @@map("scheduled_touchpoints")
}

model EngagementAnalytics {
  id                   String   @id @default(cuid())
  campaignId           String   @unique
  tenantId             String
  totalContacts        Int
  channelsUsed         Int
  automationLevel      Int
  personalizationScore Int
  responseRate         Float    @default(0)
  conversionRate       Float    @default(0)
  averageEngagement    Float    @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([tenantId])
  @@map("engagement_analytics")
}

// Problem Intelligence Models
model CompanyIntelligence {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Company Information
  companyName   String
  companyDomain String
  industryType  IndustryType
  companySize   String // STARTUP, SMALL, MEDIUM, LARGE, ENTERPRISE
  employeeCount Int?
  revenue       Float?
  headquarters  String?

  // Monitoring Configuration
  monitoringStatus    CompanyMonitoringStatus @default(ACTIVE)
  monitoringStartedAt DateTime                @default(now())
  lastAnalyzedAt      DateTime?

  // Intelligence Sources
  dataSourcesEnabled String   @default("[]") // JSON array of source strings
  analysisFrequency  String @default("REAL_TIME") // REAL_TIME, HOURLY, DAILY

  // AI Analysis Results
  overallHealthScore  Int? // 0-100
  problemRiskScore    Int? // 0-100
  opportunityScore    Int? // 0-100
  competitivePosition String?

  // Metadata
  customFields String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  problems            CustomerProblem[]
  stakeholders        CompanyStakeholder[]
  intelligenceReports IntelligenceReport[]

  @@index([tenantId, companyDomain])
  @@index([monitoringStatus])
  @@map("company_intelligence")
}

model CustomerProblem {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Company Association
  companyIntelligenceId String
  companyIntelligence   CompanyIntelligence @relation(fields: [companyIntelligenceId], references: [id], onDelete: Cascade)
  customerId            String?
  customer              Customer?           @relation(fields: [customerId], references: [id])

  // Problem Classification
  problemTitle       String
  problemDescription String
  problemCategory    String
  problemSubcategory String?
  severity           ProblemSeverity
  status             ProblemStatus   @default(DETECTED)

  // Source Information
  detectionSource String     @default("[]") // JSON array of ProblemSource enums
  sourceData      String // Raw data from detection source
  detectedAt      DateTime @default(now())
  lastUpdatedAt   DateTime @updatedAt

  // Impact Analysis
  businessImpact  String // Revenue, efficiency, compliance impact
  urgencyScore    Int // 1-100
  confidenceScore Int // 1-100 AI confidence

  // Stakeholder Information
  affectedDepartments  String @default("[]") // JSON array of department strings
  affectedStakeholders String @default("[]") // JSON array of stakeholder references

  // Solution Intelligence
  solutionFitScore         Int? // 0-100 how well our solution fits
  competitorSolutions      String? // Competitor analysis
  estimatedDealSize        String? // Deal size prediction
  implementationComplexity String? // LOW, MEDIUM, HIGH, ENTERPRISE

  // Problem Evolution
  evolutionHistory     String // Track how problem changes
  escalationPrediction String? // When problem might escalate
  resolutionPrediction String? // Predicted resolution timeline

  // AI Analysis
  aiInsights        String // AI-generated insights
  sentimentAnalysis String? // Sentiment from communications
  similarProblems   String  @default("[]") // JSON array of problem references

  // Action Items
  recommendedActions String // AI recommended actions
  assignedUserId     String?
  assignedUser       User?   @relation(fields: [assignedUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  solutionMappings ProblemSolutionMapping[]
  alerts           ProblemAlert[]

  @@index([tenantId, severity, status])
  @@index([companyIntelligenceId])
  @@index([detectedAt])
  @@map("customer_problems")
}

model CompanyStakeholder {
  id       String @id @default(cuid())
  tenantId String

  // Company Association
  companyIntelligenceId String
  companyIntelligence   CompanyIntelligence @relation(fields: [companyIntelligenceId], references: [id], onDelete: Cascade)

  // Personal Information
  firstName   String
  lastName    String
  email       String?
  phone       String?
  linkedinUrl String?
  title       String
  department  String?

  // Role Analysis
  stakeholderRole    String    @default("[]") // JSON array of StakeholderRole enums
  decisionInfluence  Int // 1-100
  budgetAuthority    Boolean @default(false)
  technicalInfluence Int // 1-100

  // Engagement Information
  lastContactedAt DateTime?
  engagementLevel Int // 1-100
  responsiveness  Int // 1-100

  // AI Insights
  personalityProfile String? // AI-determined personality
  communicationStyle String? // FORMAL, CASUAL, TECHNICAL
  painPoints         String    @default("[]") // JSON array of pain point strings
  motivations        String    @default("[]") // JSON array of motivation strings
  objections         String    @default("[]") // JSON array of objection strings

  // Problem Association
  relatedProblems String @default("[]") // JSON array of problem IDs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyIntelligenceId])
  @@index([stakeholderRole])
  @@map("company_stakeholders")
}

model ProblemSolutionMapping {
  id       String @id @default(cuid())
  tenantId String

  // Problem relation
  problemId String
  problem   CustomerProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  // Solution Information
  solutionTitle       String
  solutionDescription String?
  valueProposition    String?

  // Competitive Analysis
  competitorComparison String? // How we compare to competitors
  differentiators      String  @default("[]") // JSON array of differentiator strings

  // Implementation
  implementationSteps String? // Step-by-step implementation
  timeline            String?
  cost                Float?

  // Success Metrics
  expectedOutcomes String? // Expected results
  successMetrics   String? // How to measure success

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([problemId])
  @@map("problem_solution_mappings")
}

model IntelligenceReport {
  id       String @id @default(cuid())
  tenantId String

  // Company Association
  companyIntelligenceId String
  companyIntelligence   CompanyIntelligence @relation(fields: [companyIntelligenceId], references: [id], onDelete: Cascade)

  // Report Information
  reportType    String // DAILY, WEEKLY, MONTHLY, EVENT_TRIGGERED
  reportTitle   String
  reportSummary String

  // Analysis Results
  executiveSummary        String
  keyFindings             String // Structured findings
  problemsDetected        Int // Count of new problems
  opportunitiesIdentified Int // Count of opportunities
  riskAssessment          String // Risk analysis

  // Recommendations
  actionItems      String // Recommended actions
  urgentItems      String // High-priority items
  followUpRequired String @default("[]") // JSON array of follow-up items

  // Data Sources
  dataSourcesUsed    String @default("[]") // JSON array of ProblemSource enums
  dataQualityScore   Int // 1-100
  analysisConfidence Int // 1-100

  // Insights
  marketTrends     String? // Market trend analysis
  competitiveIntel String? // Competitive insights
  industryInsights String? // Industry-specific insights

  generatedAt DateTime  @default(now())
  validUntil  DateTime? // When report expires

  @@index([companyIntelligenceId])
  @@index([reportType])
  @@index([generatedAt])
  @@map("intelligence_reports")
}

model ProblemAlert {
  id       String @id @default(cuid())
  tenantId String

  // Problem relation
  problemId String
  problem   CustomerProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  // Alert Information
  alertType String  @default("INFO") // INFO, WARNING, CRITICAL
  threshold Float?
  isActive  Boolean @default(true)

  // Notification
  notifiedAt       DateTime?
  notificationSent Boolean   @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([problemId])
  @@map("problem_alerts")
}

model ProblemCategory {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Industry Specificity
  industryType          String @default("[]") // JSON array of IndustryType enums
  applicableDepartments String @default("[]") // JSON array of department strings

  // Classification Rules
  detectionKeywords String @default("[]") // JSON array of keyword strings
  detectionPatterns String // Regex or ML patterns

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("problem_categories")
}

// Freemium and Conversion Models
model FreemiumUser {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Agent Selection
  selectedAgent String   // 'sales', 'finance', 'crm', etc.
  
  // Usage Tracking
  dailyUsageCount      Int      @default(0)
  dailyLimit           Int      @default(10)
  weeklyUsageCount     Int      @default(0)
  monthlyUsageCount    Int      @default(0)
  lastResetDate        DateTime @default(now())
  lastUsageAt          DateTime?
  
  // Upgrade Tracking
  upgradePromptedCount Int      @default(0)
  lastUpgradePrompt    DateTime?
  upgradeDeclinedCount Int      @default(0)
  
  // Engagement
  daysActive           Int      @default(1)
  firstLoginAt         DateTime @default(now())
  lastActiveAt         DateTime @default(now())
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([tenantId, selectedAgent])
  @@index([userId])
  @@map("freemium_users")
}

model UserOnboarding {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Role Information
  selectedRole      String   // 'ceo', 'cfo', 'cto', 'sales', 'operations'
  roleConfirmedAt   DateTime?
  
  // Onboarding Progress
  currentStep       Int      @default(0)
  totalSteps        Int      @default(4)
  completedSteps    String   @default("[]") // JSON array of completed step IDs
  completionPercentage Int   @default(0)
  
  // Step Details
  stepProgress      String   @default("{}") // JSON object tracking individual step progress
  customization     String?  @default("{}") // Role-specific customizations
  
  // Completion
  isCompleted       Boolean  @default(false)
  completedAt       DateTime?
  
  // AI Agent Integration
  recommendedAgent  String?  // AI agent recommendation based on role
  agentSelected     Boolean  @default(false)
  
  // Timestamps
  startedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([selectedRole, isCompleted])
  @@map("user_onboarding")
}

model ConversionEvent {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
  
  // Event Details
  eventType    String   // 'feature_limit', 'usage_limit', 'upgrade_prompt', 'success_story'
  triggerType  String   // 'automatic', 'manual', 'scheduled'
  
  // Context
  triggerContext String @default("{}") // JSON context data
  userPlan       String // 'free', 'starter', 'business'
  currentModule  String? // Which module/agent was being used
  
  // Action Taken
  actionTaken    String   // 'dismissed', 'delayed', 'converted', 'viewed'
  conversionValue Float?  // Dollar value if converted
  
  // Timing
  promptDisplayedAt DateTime?
  actionTakenAt     DateTime?
  sessionId         String?
  
  // Analytics
  userAgent        String?
  referrer         String?
  experimentVariant String? // For A/B testing
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@index([tenantId, eventType, createdAt])
  @@index([userId, eventType])
  @@index([actionTaken, createdAt])
  @@map("conversion_events")
}

model UserSessionActivity {
  id              String   @id @default(cuid())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Session Info
  sessionId       String
  ipAddress       String?
  userAgent       String?
  
  // Activity Tracking
  pageViews       Int      @default(0)
  featuresUsed    String   @default("[]") // JSON array of features
  modulesAccessed String   @default("[]") // JSON array of modules
  
  // Performance Metrics
  averageResponseTime Float?
  errorsEncountered   Int    @default(0)
  
  // Engagement
  sessionDuration Int?     // in seconds
  lastActivityAt  DateTime @default(now())
  
  // Timestamps
  startedAt DateTime @default(now())
  endedAt   DateTime?
  
  @@index([userId, sessionId])
  @@index([tenantId, startedAt])
  @@map("user_session_activity")
}

model PerformanceMetric {
  id         String   @id @default(cuid())
  tenantId   String?
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])
  
  // Metric Details
  metricType    String   // 'response_time', 'active_users', 'success_rate', 'uptime'
  metricValue   Float
  metricUnit    String?  // 'ms', 'count', 'percentage'
  
  // System Context
  endpoint      String?  // API endpoint if applicable
  userCount     Int?     // Active users at time of metric
  systemHealth  String?  // 'excellent', 'good', 'fair', 'poor'
  
  // Timestamps
  recordedAt DateTime @default(now())
  
  @@index([metricType, recordedAt])
  @@index([tenantId, recordedAt])
  @@map("performance_metrics")
}
