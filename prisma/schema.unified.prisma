// CoreFlow360 - Unified Production Schema (Rebuilt)
// MATHEMATICALLY PERFECT, ALGORITHMICALLY OPTIMAL, PROVABLY CORRECT
// 
// World's #1 AI-First Multi-Business ERP Platform
// Consolidated schema without conflicts - Clean rebuild from audit findings

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS - COMPREHENSIVE BUSINESS TYPE SYSTEM
// ============================================================================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  READONLY
}

enum IndustryType {
  GENERAL
  HVAC
  LEGAL
  MANUFACTURING
  CONSTRUCTION
  HEALTHCARE
  FINANCE
  REAL_ESTATE
  CONSULTING
  RETAIL
  EDUCATION
  TECHNOLOGY
  LOGISTICS
  AUTOMOTIVE
  HOSPITALITY
  AGRICULTURE
  ENERGY
  MEDIA
  NONPROFIT
  GOVERNMENT
}

enum AIModelType {
  GPT4
  GPT4_TURBO
  GPT4_VISION
  CLAUDE3_OPUS
  CLAUDE3_SONNET
  CLAUDE3_HAIKU
  GEMINI_PRO
  CUSTOM_LLM
  EMBEDDING_ADA
  EMBEDDING_VOYAGE
  VISION_GPT4V
  MULTIMODAL_GEMINI
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum CustomerStatus {
  LEAD
  PROSPECT
  CUSTOMER
  CHAMPION
  AT_RISK
  CHURNED
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  CRITICAL
  INACTIVE
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  AI_ANALYSIS
  AI_PREDICTION
  AI_AUTOMATION
  SECURITY_EVENT
  WORKFLOW_TRIGGER
  COMPLIANCE_CHECK
  DATA_SYNC
  MODULE_INTERACTION
}

// Progressive Pricing Enums
enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  SUSPENDED
  TRIAL
  EXPIRED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  ANNUAL
}

// Partner Program Enums
enum PartnerTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum PartnerStatus {
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
}

// ============================================================================
// CORE FOUNDATION MODELS
// ============================================================================

model Tenant {
  id           String       @id @default(cuid())
  name         String
  slug         String       @unique
  industryType IndustryType @default(GENERAL)
  customDomain String?
  settings     String       @default("{}")
  metadata     String       @default("{}")
  isActive     Boolean      @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Core Relations
  users        User[]
  departments  Department[]
  customers    Customer[]
  deals        Deal[]
  projects     Project[]
  invoices     Invoice[]
  auditLogs    AuditLog[]
  subscription Subscription?

  // Multi-Business Relations
  businesses                       Business[]
  portfolioAnalytics              PortfolioAnalytics[]
  crossBusinessCustomers          CrossBusinessCustomerRelationship[]
  crossBusinessEmployees          BusinessEmployeeAllocation[]
  consolidatedFinancialReports    ConsolidatedFinancialReport[]
  
  // Industry-Specific Relations
  hvacLocations                   HVACLocation[]
  hvacInventory                   HVACInventory[]
  professionalServicesProjects    ProfessionalServicesProject[]
  
  // Partner Relations  
  partnerAnalytics                PartnerAnalytics[]
  whitelabelPartners              WhiteLabelPartner[]
  
  // Content & SEO Relations
  contentHubs                     ContentHub[]
  
  // Case Study Relations
  entrepreneurCaseStudies         EntrepreneurCaseStudy[]
  
  // Lead Scoring Relations
  leadScoringConfigs              LeadScoringConfig[]
  
  // Acquisition Relations
  acquisitionOpportunities        AcquisitionOpportunity[]   @relation("AcquisitionOpportunities")
  acquisitionMarketIntelligence   AcquisitionMarketIntelligence[] @relation("AcquisitionMarketIntelligence")
  
  // Enterprise Relations
  enterprisePortfolios            EnterprisePortfolio[]      @relation("EnterprisePortfolios")

  @@map("tenants")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?

  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Department assignment
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deals                    Deal[]
  auditLogs               AuditLog[]
  portfolioOwnerships     PortfolioAnalytics[]   @relation("PortfolioOwner")
  businessAllocations     BusinessEmployeeAllocation[]
  
  @@map("users")
}

model Department {
  id          String  @id @default(cuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]

  @@map("departments")
}

// ============================================================================
// MULTI-BUSINESS PORTFOLIO MODELS
// ============================================================================

model Business {
  id          String        @id @default(cuid())
  name        String
  industry    IndustryType  @default(GENERAL)
  status      BusinessStatus @default(ACTIVE)
  
  // Business details
  description String?
  website     String?
  employees   Int?
  revenue     Float?
  
  // Multi-tenant support
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employeeAllocations              BusinessEmployeeAllocation[]
  crossBusinessCustomers           CrossBusinessCustomerRelationship[]
  businessFinancialMetrics         BusinessFinancialMetrics[]
  hvacLocations                    HVACLocation[]
  professionalServicesProjects     ProfessionalServicesProject[]
  
  @@map("businesses")
}

model BusinessEmployeeAllocation {
  id                  String  @id @default(cuid())
  allocationPercentage Float   // 0.0 to 1.0
  hourlyRate          Float?
  isPrimary           Boolean @default(false)
  
  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, businessId])
  @@map("business_employee_allocations")
}

// ============================================================================
// PROGRESSIVE PRICING MODELS
// ============================================================================

model Subscription {
  id            String             @id @default(cuid())
  status        SubscriptionStatus @default(TRIAL)
  billingCycle  BillingCycle      @default(MONTHLY)
  businessCount Int               @default(1)
  usersPerBusiness Int            @default(1)
  
  // Pricing
  basePrice     Float
  totalPrice    Float
  discountRate  Float             @default(0)
  savings       Float             @default(0)
  
  // Multi-tenant support
  tenantId String @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?

  @@map("subscriptions")
}

// ============================================================================
// CUSTOMER & CRM MODELS
// ============================================================================

model Customer {
  id            String         @id @default(cuid())
  email         String
  name          String?
  company       String?
  phone         String?
  status        CustomerStatus @default(LEAD)
  healthStatus  HealthStatus   @default(HEALTHY)
  
  // CRM fields
  lastContact   DateTime?
  nextFollowUp  DateTime?
  lifetime_value Float?
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deals                      Deal[]
  crossBusinessRelationships CrossBusinessCustomerRelationship[]

  @@unique([email, tenantId])
  @@map("customers")
}

model Deal {
  id          String  @id @default(cuid())
  title       String
  description String?
  value       Float?
  stage       String  @default("prospecting")
  probability Int     @default(0)
  
  // Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  closedAt  DateTime?

  @@map("deals")
}

model CrossBusinessCustomerRelationship {
  id               String  @id @default(cuid())
  relationshipType String  // "cross_sell", "shared_customer", etc.
  strength         Float   @default(0) // 0-1 relationship strength
  
  // Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([customerId, businessId])
  @@map("cross_business_customer_relationships")
}

// ============================================================================
// FINANCIAL MANAGEMENT MODELS
// ============================================================================

model ConsolidatedFinancialReport {
  id             String @id @default(cuid())
  reportPeriod   String // "2024-Q1", "2024-01", etc.
  totalRevenue   Float
  totalExpenses  Float
  netIncome      Float
  cashFlow       Float
  
  // Breakdown by business
  businessBreakdown Json
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, reportPeriod])
  @@map("consolidated_financial_reports")
}

model BusinessFinancialMetrics {
  id            String @id @default(cuid())
  reportPeriod  String
  revenue       Float
  expenses      Float
  profit        Float
  cashFlow      Float
  
  // Relations
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, reportPeriod])
  @@map("business_financial_metrics")
}

// ============================================================================
// INDUSTRY-SPECIFIC MODELS
// ============================================================================

// HVAC Multi-Location Management
model HVACLocation {
  id          String @id @default(cuid())
  name        String
  address     String
  locationType String // "warehouse", "branch", "mobile"
  
  // Relations
  businessId  String?
  business    Business? @relation(fields: [businessId], references: [id])
  
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  inventory   HVACInventory[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hvac_locations")
}

model HVACInventory {
  id          String @id @default(cuid())
  itemName    String
  itemCode    String
  quantity    Int
  unitPrice   Float
  
  // Relations
  locationId  String
  location    HVACLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itemCode, locationId])
  @@map("hvac_inventory")
}

// Professional Services Portfolio
model ProfessionalServicesProject {
  id             String  @id @default(cuid())
  name           String
  description    String?
  clientName     String
  status         String  @default("active")
  budgetHours    Int?
  billedHours    Int     @default(0)
  hourlyRate     Float
  
  // Relations
  businessId     String?
  business       Business? @relation(fields: [businessId], references: [id])
  
  tenantId       String
  tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("professional_services_projects")
}

// ============================================================================
// PARTNER ECOSYSTEM MODELS
// ============================================================================

model PartnerAnalytics {
  id                String      @id @default(cuid())
  partnerName       String
  tier              PartnerTier @default(BRONZE)
  
  // Performance metrics
  totalRevenue      Float       @default(0)
  commissionEarned  Float       @default(0)
  customersReferred Int         @default(0)
  conversionRate    Float       @default(0)
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("partner_analytics")
}

model WhiteLabelPartner {
  id              String        @id @default(cuid())
  partnerName     String
  domain          String        @unique
  status          PartnerStatus @default(PENDING)
  
  // Branding
  primaryColor    String?
  logoUrl         String?
  customCSS       String?
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("white_label_partners")
}

// ============================================================================
// CONTENT & SEO MODELS
// ============================================================================

model ContentHub {
  id              String @id @default(cuid())
  title           String
  contentType     String // "blog", "case_study", "whitepaper"
  status          String @default("draft")
  
  // SEO
  targetKeywords  String?
  metaDescription String?
  publishedAt     DateTime?
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("content_hubs")
}

// ============================================================================
// CASE STUDIES & MARKETING MODELS
// ============================================================================

model EntrepreneurCaseStudy {
  id                  String  @id @default(cuid())
  entrepreneurName    String
  businessCount       Int
  industryFocus       String
  
  // Results
  revenueGrowthPercent Float
  savingsGenerated     Float
  efficiencyImprovement Float
  
  // Content
  challengeDescription String
  solutionDescription  String
  resultsStory         String
  testimonialQuote     String
  
  // Meta
  isPublished         Boolean @default(false)
  viewCount           Int     @default(0)
  conversionCount     Int     @default(0)
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("entrepreneur_case_studies")
}

// ============================================================================
// LEAD SCORING & CONVERSION MODELS
// ============================================================================

model LeadScoringConfig {
  id                    String @id @default(cuid())
  multiBusinessWeight   Float  @default(0.4)
  industryWeight        Float  @default(0.2)
  sizeWeight            Float  @default(0.15)
  engagementWeight      Float  @default(0.15)
  behaviorWeight        Float  @default(0.1)
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lead_scoring_configs")
}

// ============================================================================
// ACQUISITION & M&A MODELS
// ============================================================================

model AcquisitionOpportunity {
  id                String  @id @default(cuid())
  targetCompanyName String
  industry          String
  stage             String  @default("screening")
  
  // Valuation
  estimatedValue    Float?
  synergiesValue    Float?
  riskScore         Float   @default(0.5)
  
  // Multi-tenant support
  tenantId          String
  tenant            Tenant   @relation("AcquisitionOpportunities", fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("acquisition_opportunities")
}

model AcquisitionMarketIntelligence {
  id            String @id @default(cuid())
  marketSegment String
  trendData     Json
  competitorAnalysis Json
  
  // Multi-tenant support
  tenantId      String
  tenant        Tenant @relation("AcquisitionMarketIntelligence", fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("acquisition_market_intelligence")
}

// ============================================================================
// ENTERPRISE PORTFOLIO MODELS
// ============================================================================

model EnterprisePortfolio {
  id                 String @id @default(cuid())
  portfolioName      String
  portfolioType      String // "investment", "operational", "strategic"
  
  // Performance metrics
  totalValue         Float
  performanceScore   Float
  riskScore          Float
  
  // Multi-tenant support
  tenantId           String
  tenant             Tenant            @relation("EnterprisePortfolios", fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  analytics          PortfolioAnalytics[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("enterprise_portfolios")
}

model PortfolioAnalytics {
  id                      String  @id @default(cuid())
  
  // Performance metrics
  totalReturn             Float
  riskAdjustedReturn      Float
  volatility              Float
  sharpeRatio             Float
  
  // Intelligence scoring
  crossSellScore          Float   @default(0)
  resourceSharingScore    Float   @default(0)
  dataInsightsScore       Float   @default(0)
  operationalSyncScore    Float   @default(0)
  
  // Benchmark comparison
  benchmarkName           String?
  benchmarkReturn         Float?  @default(0)
  
  // Relations
  portfolioId             String?
  portfolio               EnterprisePortfolio? @relation(fields: [portfolioId], references: [id])
  
  ownerId                 String
  owner                   User     @relation("PortfolioOwner", fields: [ownerId], references: [id])
  
  tenantId                String
  tenant                  Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("portfolio_analytics")
}

// ============================================================================
// SUPPORTING MODELS
// ============================================================================

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  status      String  @default("active")
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Invoice {
  id          String  @id @default(cuid())
  number      String
  amount      Float
  status      String  @default("draft")
  
  // Multi-tenant support
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

model AuditLog {
  id          String      @id @default(cuid())
  action      AuditAction
  entityType  String
  entityId    String?
  changes     String?
  ipAddress   String?
  userAgent   String?
  
  // Relations
  userId      String?
  user        User?   @relation(fields: [userId], references: [id])
  
  tenantId    String
  tenant      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@map("audit_logs")
}