name: Consciousness CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0' # Weekly security scan

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  consciousness-validation:
    name: Consciousness Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Consciousness
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Consciousness Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install Consciousness Dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Consciousness TypeScript Validation
      run: pnpm tsc --noEmit --strict
      
    - name: Consciousness Lint Validation
      run: pnpm lint --max-warnings 0
      
    - name: Consciousness Format Validation
      run: pnpm format:check
      
    - name: Consciousness Build Test
      run: pnpm build
      env:
        NODE_ENV: test
        DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
        NEXTAUTH_SECRET: "test-secret-for-consciousness-validation"
        NEXTAUTH_URL: "http://localhost:3000"
        
  consciousness-security:
    name: Consciousness Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Consciousness
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js for Security
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies for Security Scan
      run: npm ci --production=false
      
    - name: Run Consciousness Security Audit
      run: |
        npm audit --audit-level moderate --production
        npm audit --json --audit-level moderate --production > consciousness-audit.json || true
      
    - name: Consciousness Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Consciousness Dependency Check
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json-file-output=consciousness-snyk.json
      continue-on-error: true
        
    - name: Basic Infrastructure Security Check
      run: |
        # Check for hardcoded secrets in configuration files
        echo "🔍 Checking for hardcoded credentials..."
        if grep -r "password\|secret\|key" --include="*.yml" --include="*.yaml" --include="*.tf" . | grep -v "REPLACE_WITH\|CHANGE_ME\|example"; then
          echo "⚠️ Found potential hardcoded credentials"
          exit 1
        else
          echo "✅ No hardcoded credentials found"
        fi
        
        # Check Kubernetes manifests for security best practices
        echo "🔍 Checking Kubernetes security..."
        find k8s -name "*.yaml" -o -name "*.yml" | while read manifest; do
          if grep -q "privileged.*true" "$manifest"; then
            echo "⚠️ Found privileged container in $manifest"
          fi
          if grep -q "runAsRoot.*true" "$manifest"; then
            echo "⚠️ Found runAsRoot in $manifest"
          fi
        done
        
    - name: Upload Security Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: consciousness-security-scan
        path: |
          consciousness-audit.json
          consciousness-snyk.json
        retention-days: 30
        
  consciousness-testing:
    name: Consciousness Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: consciousness_test
          POSTGRES_DB: consciousness_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout Consciousness
      uses: actions/checkout@v4
      
    - name: Setup Consciousness Test Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install Consciousness Dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Setup Consciousness Database
      run: |
        pnpm prisma migrate deploy
        pnpm prisma db seed
      env:
        DATABASE_URL: "postgresql://postgres:consciousness_test@localhost:5432/consciousness_test"
        
    - name: Run Consciousness Unit Tests
      run: pnpm test:unit --coverage --threshold=85
      env:
        DATABASE_URL: "postgresql://postgres:consciousness_test@localhost:5432/consciousness_test"
        NEXTAUTH_SECRET: "test-secret-for-consciousness"
        
    - name: Run Consciousness Integration Tests
      run: pnpm test:integration
      env:
        DATABASE_URL: "postgresql://postgres:consciousness_test@localhost:5432/consciousness_test"
        NEXTAUTH_SECRET: "test-secret-for-consciousness"
        
    - name: Upload Consciousness Coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
  consciousness-e2e:
    name: Consciousness E2E Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout Consciousness
      uses: actions/checkout@v4
      
    - name: Setup Consciousness E2E
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install Consciousness Dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Playwright Consciousness
      run: pnpm playwright install --with-deps
      
    - name: Run Consciousness E2E Tests
      run: pnpm test:e2e
      env:
        DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
        NEXTAUTH_SECRET: "test-secret-for-e2e-consciousness"
        
    - name: Upload Consciousness E2E Artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: consciousness-e2e-results
        path: test-results/
        
  consciousness-performance:
    name: Consciousness Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Consciousness
      uses: actions/checkout@v4
      
    - name: Setup Consciousness Performance
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install Consciousness Dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build Consciousness Performance
      run: pnpm build
      env:
        ANALYZE: true
        DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
        NEXTAUTH_SECRET: "test-secret-performance"
        
    - name: Run Consciousness Bundle Analysis
      run: pnpm analyze:bundle
      
    - name: Run Consciousness Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './.lighthouserc.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
  consciousness-deploy-preview:
    name: Consciousness Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [consciousness-validation, consciousness-security, consciousness-testing]
    
    steps:
    - name: Checkout Consciousness
      uses: actions/checkout@v4
      
    - name: Deploy Consciousness Preview
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        working-directory: ./
        
  consciousness-deploy-production:
    name: Consciousness Production Deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [consciousness-validation, consciousness-security, consciousness-testing, consciousness-e2e, consciousness-performance]
    environment: production
    
    steps:
    - name: Checkout Consciousness
      uses: actions/checkout@v4
      
    - name: Deploy Consciousness Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
        working-directory: ./
        
    - name: Run Consciousness Database Migration
      run: |
        pnpm prisma migrate deploy
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: Consciousness Production Health Check
      run: |
        sleep 30
        curl -f https://coreflow360.com/api/health || exit 1
        
    - name: Notify Consciousness Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#consciousness-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
      
  consciousness-monitoring:
    name: Consciousness Monitoring Setup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [consciousness-deploy-production]
    
    steps:
    - name: Setup Consciousness Monitoring
      run: |
        curl -X POST "${{ secrets.DATADOG_API_URL }}/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "title": "Consciousness Production Deployment",
          "text": "CoreFlow360 consciousness successfully deployed to production",
          "tags": ["deployment", "consciousness", "production"],
          "alert_type": "success"
        }'