name: üöÄ Blue-Green Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
        type: string
      dry_run:
        description: 'Perform dry run (show what would be deployed)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBECTL_VERSION: v1.28.0
  HELM_VERSION: v3.12.0

jobs:
  pre-deployment-checks:
    name: üîç Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      security-scan-passed: ${{ steps.security-scan.outputs.passed }}
      vulnerability-scan-passed: ${{ steps.vulnerability-scan.outputs.passed }}
      tests-passed: ${{ steps.tests.outputs.passed }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run security scanning
      id: security-scan
      run: |
        echo "Running security scans..."
        # Run Trivy security scan
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v ${{ github.workspace }}:/workspace \
          aquasec/trivy:latest fs /workspace --exit-code 0 --format json > security-report.json
        
        # Check for critical vulnerabilities
        critical_vulns=$(cat security-report.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | length' | wc -l)
        
        if [ "$critical_vulns" -gt 0 ]; then
          echo "‚ùå Critical vulnerabilities found: $critical_vulns"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ No critical vulnerabilities found"
          echo "passed=true" >> $GITHUB_OUTPUT
        fi

    - name: Run vulnerability scanning
      id: vulnerability-scan
      run: |
        echo "Running vulnerability scans..."
        # Run dependency vulnerability scan
        npm audit --audit-level high
        echo "passed=true" >> $GITHUB_OUTPUT

    - name: Run tests
      id: tests
      if: ${{ !inputs.skip_tests }}
      run: |
        echo "Running test suite..."
        npm ci
        npm run test:ci
        npm run test:e2e
        echo "passed=true" >> $GITHUB_OUTPUT

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  build-and-push:
    name: üèóÔ∏è Build and Push Image
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: ${{ needs.pre-deployment-checks.outputs.security-scan-passed == 'true' }}
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ inputs.image_tag }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          NODE_ENV=production
          BUILD_TIME=${{ github.run_number }}
          COMMIT_SHA=${{ github.sha }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  deploy-staging:
    name: üß™ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-push]
    if: ${{ inputs.environment == 'staging' || inputs.environment == 'production' }}
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Deploy to staging with blue-green
      run: |
        # Apply blue-green deployment configuration
        kubectl apply -f k8s/deployment/blue-green-deployment.yaml
        
        # Run blue-green deployment
        ./scripts/deployment/blue-green-deploy.sh deploy \
          --image-tag ${{ inputs.image_tag }} \
          --namespace coreflow360-staging \
          --timeout 600 \
          ${{ inputs.dry_run && '--dry-run' || '' }}

    - name: Run staging smoke tests
      run: |
        echo "Running staging smoke tests..."
        # Wait for deployment to stabilize
        sleep 30
        
        # Get staging service endpoint
        STAGING_URL=$(kubectl get service coreflow360-active -n coreflow360-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run smoke tests
        curl -f "$STAGING_URL/api/health" || exit 1
        curl -f "$STAGING_URL/api/ready" || exit 1
        
        echo "‚úÖ Staging smoke tests passed"

    - name: Run integration tests on staging
      if: ${{ !inputs.skip_tests }}
      run: |
        echo "Running integration tests on staging..."
        npm ci
        STAGING_URL=$(kubectl get service coreflow360-active -n coreflow360-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        export TEST_BASE_URL="$STAGING_URL"
        npm run test:integration

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-push, deploy-staging]
    if: ${{ inputs.environment == 'production' && !inputs.dry_run }}
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Pre-deployment backup
      run: |
        echo "Creating pre-deployment backup..."
        # Backup current deployment state
        kubectl get deployments,services,configmaps,secrets -n coreflow360-blue-green -o yaml > pre-deployment-backup.yaml
        
        # Store backup as artifact
        echo "Backup created: pre-deployment-backup.yaml"

    - name: Deploy to production with blue-green
      id: production-deploy
      run: |
        # Apply blue-green deployment configuration
        kubectl apply -f k8s/deployment/blue-green-deployment.yaml
        
        # Run blue-green deployment
        ./scripts/deployment/blue-green-deploy.sh deploy \
          --image-tag ${{ inputs.image_tag }} \
          --namespace coreflow360-blue-green \
          --timeout 900 \
          --health-timeout 600

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Wait for deployment to stabilize
        sleep 60
        
        # Get production service endpoint
        PROD_URL=$(kubectl get service coreflow360-active -n coreflow360-blue-green -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Comprehensive health checks
        for endpoint in health ready metrics; do
          echo "Checking /$endpoint endpoint..."
          if ! curl -f --max-time 30 "$PROD_URL/api/$endpoint"; then
            echo "‚ùå Health check failed for /$endpoint"
            exit 1
          fi
        done
        
        echo "‚úÖ Production health checks passed"

    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests..."
        PROD_URL=$(kubectl get service coreflow360-active -n coreflow360-blue-green -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Test critical user journeys
        echo "Testing authentication..."
        response=$(curl -s "$PROD_URL/api/auth/health")
        echo "Auth health: $response"
        
        echo "Testing database connectivity..."
        response=$(curl -s "$PROD_URL/api/health/database")
        echo "Database health: $response"
        
        echo "‚úÖ Production smoke tests passed"

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        # Send notification to Slack/Teams (implement webhook)
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üöÄ CoreFlow360 production deployment successful! Version: ${{ inputs.image_tag }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Rollback on failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed, initiating rollback..."
        ./scripts/deployment/blue-green-deploy.sh rollback \
          --namespace coreflow360-blue-green
        
        # Send failure notification
        echo "üîÑ Rollback completed"

    - name: Upload deployment artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: |
          pre-deployment-backup.yaml
          deployment-logs.txt

  post-deployment:
    name: üìä Post-deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Generate deployment report
      run: |
        echo "# üöÄ CoreFlow360 Deployment Report" > deployment-report.md
        echo "" >> deployment-report.md
        echo "**Deployment Time:** $(date -u)" >> deployment-report.md
        echo "**Image Tag:** ${{ inputs.image_tag }}" >> deployment-report.md
        echo "**Environment:** ${{ inputs.environment }}" >> deployment-report.md
        echo "**Triggered By:** ${{ github.actor }}" >> deployment-report.md
        echo "**Workflow Run:** ${{ github.run_id }}" >> deployment-report.md
        echo "" >> deployment-report.md
        
        # Get deployment status
        echo "## üìä Deployment Status" >> deployment-report.md
        echo "\`\`\`" >> deployment-report.md
        ./scripts/deployment/blue-green-deploy.sh status --namespace coreflow360-blue-green >> deployment-report.md
        echo "\`\`\`" >> deployment-report.md

    - name: Cleanup old deployments
      run: |
        echo "Cleaning up old deployments..."
        ./scripts/deployment/blue-green-deploy.sh cleanup \
          --namespace coreflow360-blue-green

    - name: Update deployment metrics
      run: |
        echo "Updating deployment metrics..."
        # Record deployment metrics (implement metrics endpoint)
        # curl -X POST "${{ secrets.METRICS_ENDPOINT }}/deployments" \
        #   -H "Content-Type: application/json" \
        #   -d '{"version":"${{ inputs.image_tag }}","environment":"${{ inputs.environment }}","status":"success","timestamp":"$(date -u +%Y-%m-%dT%H:%M:%SZ)"}'

    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md