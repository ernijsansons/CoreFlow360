name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Run unit tests
      run: npm test -- --run
      env:
        DATABASE_URL: 'postgresql://test:test@localhost:5432/test'
        NEXTAUTH_SECRET: 'test-secret-key-for-ci-only'
        ENCRYPTION_KEY: '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: 'postgresql://test:test@localhost:5432/test'
        NEXTAUTH_SECRET: 'test-secret-key-for-ci-only'
        ENCRYPTION_KEY: '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run npm audit
      run: npm audit --audit-level=high || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: security-results/

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: ${{ always() && (needs.test.result == 'success' || inputs.skip_tests) && needs.security-scan.result == 'success' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Vercel CLI
      run: npm install -g vercel
    
    - name: Pull Vercel Environment
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy to Production
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      id: deploy
    
    - name: Get deployment URL
      id: deployment
      run: echo "url=$(vercel inspect --token=${{ secrets.VERCEL_TOKEN }} | grep 'URL' | awk '{print $2}')" >> $GITHUB_OUTPUT
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Deployed to production: ${{ steps.deployment.outputs.url }}'
          })

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Wait for deployment
      run: sleep 30
    
    - name: Check application health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://coreflow360.com/api/health)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed with status: $response"
          exit 1
        fi
    
    - name: Run smoke tests
      run: |
        # Test critical endpoints
        curl -f https://coreflow360.com || exit 1
        curl -f https://coreflow360.com/api/health || exit 1
        curl -f https://coreflow360.com/login || exit 1
    
    - name: Notify on success
      if: success()
      run: echo "üéâ Deployment successful and healthy!"
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "‚ö†Ô∏è Health check failed, initiating rollback..."
        # Vercel automatically maintains previous deployments
        # Manual rollback can be triggered through Vercel dashboard