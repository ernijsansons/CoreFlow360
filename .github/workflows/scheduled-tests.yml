name: Scheduled Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: coreflow360_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Setup database
      run: |
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/coreflow360_test
    
    - name: Run integration tests
      run: npm test -- --grep "integration"
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/coreflow360_test
        REDIS_URL: redis://localhost:6379
        NEXTAUTH_SECRET: test-secret
        ENCRYPTION_KEY: '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
        NODE_ENV: test

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: 'postgresql://test:test@localhost:5432/test'
        NEXTAUTH_SECRET: 'test-secret'
        ENCRYPTION_KEY: '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
    
    - name: Run performance benchmarks
      run: |
        npm run test:load || true
        npm run performance:analyze || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-reports/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run security audit
      run: |
        npm audit --json > audit-results.json || true
        npm run audit:security || true
    
    - name: Check for critical vulnerabilities
      run: |
        critical_count=$(npm audit --json | jq '.metadata.vulnerabilities.critical // 0')
        if [ "$critical_count" -gt 0 ]; then
          echo "❌ Found $critical_count critical vulnerabilities"
          exit 1
        fi
        echo "✅ No critical vulnerabilities found"
    
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: audit-results.json

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, security-audit]
    if: always()
    
    steps:
    - name: Prepare summary
      run: |
        echo "## Daily Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Create issue if tests fail
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Daily Test Failure - ${date}`,
            body: `The scheduled daily tests have failed. Please review the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
            labels: ['test-failure', 'automated']
          });